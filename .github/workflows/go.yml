# This workflow will build a golang project and create a release
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Build and Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22.0'

    - name: Go get
      run: go get -v ./...

    - name: Build
      run: GOOS=windows GOARCH=amd64 go build -o ./bin/ttrackerclient.exe ./timetracker/src/client/client.go

    - name: Build Daemon
      run: GOOS=windows GOARCH=amd64 go build -o ./bin/ttrackerd.exe ./timetracker/src/daemon/daemon.go
#
#    - name: Test
#      run: go test -v ./...

    - name: Set version envvar
      run: echo "version=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

    - name: Display version
      run: echo "Version is $version"


    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: binaries
        path: |
          ./bin/ttrackerclient.exe
          ./bin/ttrackerd.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }} 
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: binaries
        path: ./bin
    
    # - name: Fetch tags
    #   run: git fetch --tags

    - name: Create Release
      run: |
        gh release create "$version" ./bin/ttrackerclient.exe -t "Release $version" -n "ttrackerclient $version"
        gh release upload "$version" ./bin/ttrackerd.exe -n "ttrackerd $version"
